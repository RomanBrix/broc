{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar getDisplayName = function getDisplayName(WrappedComponent) {\n  var component = WrappedComponent.WrappedComponent || WrappedComponent;\n  return component.displayName || component.name || 'Component';\n};\n\nvar round = function round(x, steps) {\n  return Math.ceil(x / steps) * steps;\n};\n\nexports.default = function (_ref) {\n  var config = _ref.config,\n      store = _ref.store;\n  return function (WrappedComponent) {\n    var _class, _temp2;\n\n    return _temp2 = _class = function (_Component) {\n      _inherits(BlockResizeableDecorator, _Component);\n\n      function BlockResizeableDecorator() {\n        var _ref2;\n\n        var _temp, _this, _ret;\n\n        _classCallCheck(this, BlockResizeableDecorator);\n\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = BlockResizeableDecorator.__proto__ || Object.getPrototypeOf(BlockResizeableDecorator)).call.apply(_ref2, [this].concat(args))), _this), _this.state = {\n          hoverPosition: {},\n          clicked: false\n        }, _this.setEntityData = function (data) {\n          _this.props.blockProps.setResizeData(data);\n        }, _this.mouseLeave = function () {\n          if (!_this.state.clicked) {\n            _this.setState({\n              hoverPosition: {}\n            });\n          }\n        }, _this.mouseMove = function (evt) {\n          var _this$props = _this.props,\n              vertical = _this$props.vertical,\n              horizontal = _this$props.horizontal;\n          var hoverPosition = _this.state.hoverPosition;\n          var tolerance = 6; // TODO figure out if and how to achieve this without fetching the DOM node\n          // eslint-disable-next-line react/no-find-dom-node\n\n          var pane = _reactDom2.default.findDOMNode(_this);\n\n          var b = pane.getBoundingClientRect();\n          var x = evt.clientX - b.left;\n          var y = evt.clientY - b.top;\n          var isTop = vertical && vertical !== 'auto' ? y < tolerance : false;\n          var isLeft = horizontal ? x < tolerance : false;\n          var isRight = horizontal ? x >= b.width - tolerance : false;\n          var isBottom = vertical && vertical !== 'auto' ? y >= b.height - tolerance && y < b.height : false;\n          var canResize = isTop || isLeft || isRight || isBottom;\n          var newHoverPosition = {\n            isTop: isTop,\n            isLeft: isLeft,\n            isRight: isRight,\n            isBottom: isBottom,\n            canResize: canResize\n          };\n          var hasNewHoverPositions = Object.keys(newHoverPosition).filter(function (key) {\n            return hoverPosition[key] !== newHoverPosition[key];\n          });\n\n          if (hasNewHoverPositions.length) {\n            _this.setState({\n              hoverPosition: newHoverPosition\n            });\n          }\n        }, _this.mouseDown = function (event) {\n          // No mouse-hover-position data? Nothing to resize!\n          if (!_this.state.hoverPosition.canResize) {\n            return;\n          }\n\n          event.preventDefault();\n          var _this$props2 = _this.props,\n              resizeSteps = _this$props2.resizeSteps,\n              vertical = _this$props2.vertical,\n              horizontal = _this$props2.horizontal;\n          var hoverPosition = _this.state.hoverPosition;\n          var isTop = hoverPosition.isTop,\n              isLeft = hoverPosition.isLeft,\n              isRight = hoverPosition.isRight,\n              isBottom = hoverPosition.isBottom; // TODO figure out how to achieve this without fetching the DOM node\n          // eslint-disable-next-line react/no-find-dom-node\n\n          var pane = _reactDom2.default.findDOMNode(_this);\n\n          var startX = event.clientX;\n          var startY = event.clientY;\n          var startWidth = parseInt(document.defaultView.getComputedStyle(pane).width, 10);\n          var startHeight = parseInt(document.defaultView.getComputedStyle(pane).height, 10); // Do the actual drag operation\n\n          var doDrag = function doDrag(dragEvent) {\n            var width = startWidth + (isLeft ? startX - dragEvent.clientX : dragEvent.clientX - startX);\n            var height = startHeight + dragEvent.clientY - startY;\n            var editorComp = store.getEditorRef(); // this keeps backwards-compatibility with react 15\n\n            var editorNode = editorComp.refs.editor ? editorComp.refs.editor : editorComp.editor;\n            width = Math.min(editorNode.clientWidth, width);\n            height = Math.min(editorNode.clientHeight, height);\n            var widthPerc = 100 / editorNode.clientWidth * width;\n            var heightPerc = 100 / editorNode.clientHeight * height;\n            var newState = {};\n\n            if ((isLeft || isRight) && horizontal === 'relative') {\n              newState.width = resizeSteps ? round(widthPerc, resizeSteps) : widthPerc;\n            } else if ((isLeft || isRight) && horizontal === 'absolute') {\n              newState.width = resizeSteps ? round(width, resizeSteps) : width;\n            }\n\n            if ((isTop || isBottom) && vertical === 'relative') {\n              newState.height = resizeSteps ? round(heightPerc, resizeSteps) : heightPerc;\n            } else if ((isTop || isBottom) && vertical === 'absolute') {\n              newState.height = resizeSteps ? round(height, resizeSteps) : height;\n            }\n\n            dragEvent.preventDefault();\n\n            _this.setState(newState);\n          }; // Finished dragging\n\n\n          var stopDrag = function stopDrag() {\n            // TODO clean up event listeners\n            document.removeEventListener('mousemove', doDrag, false);\n            document.removeEventListener('mouseup', stopDrag, false);\n            var _this$state = _this.state,\n                width = _this$state.width,\n                height = _this$state.height;\n\n            _this.setState({\n              clicked: false\n            });\n\n            _this.setEntityData({\n              width: width,\n              height: height\n            });\n          }; // TODO clean up event listeners\n\n\n          document.addEventListener('mousemove', doDrag, false);\n          document.addEventListener('mouseup', stopDrag, false);\n\n          _this.setState({\n            clicked: true\n          });\n        }, _temp), _possibleConstructorReturn(_this, _ret);\n      } // used to save the hoverPosition so it can be leveraged to determine if a\n      // drag should happen on mousedown\n      // used to save the hoverPosition so it can be leveraged to determine if a\n      // drag should happen on mousedown\n      // Handle mousedown for resizing\n\n\n      _createClass(BlockResizeableDecorator, [{\n        key: 'render',\n        value: function render() {\n          var _this2 = this;\n\n          var _props = this.props,\n              blockProps = _props.blockProps,\n              vertical = _props.vertical,\n              horizontal = _props.horizontal,\n              style = _props.style,\n              resizeSteps = _props.resizeSteps,\n              elementProps = _objectWithoutProperties(_props, ['blockProps', 'vertical', 'horizontal', 'style', 'resizeSteps']);\n\n          var _state = this.state,\n              width = _state.width,\n              height = _state.height,\n              hoverPosition = _state.hoverPosition;\n          var isTop = hoverPosition.isTop,\n              isLeft = hoverPosition.isLeft,\n              isRight = hoverPosition.isRight,\n              isBottom = hoverPosition.isBottom;\n\n          var styles = _extends({\n            position: 'relative'\n          }, style);\n\n          if (horizontal === 'auto') {\n            styles.width = 'auto';\n          } else if (horizontal === 'relative') {\n            styles.width = (width || blockProps.resizeData.width || 40) + '%';\n          } else if (horizontal === 'absolute') {\n            styles.width = (width || blockProps.resizeData.width || 40) + 'px';\n          }\n\n          if (vertical === 'auto') {\n            styles.height = 'auto';\n          } else if (vertical === 'relative') {\n            styles.height = (height || blockProps.resizeData.height || 40) + '%';\n          } else if (vertical === 'absolute') {\n            styles.height = (height || blockProps.resizeData.height || 40) + 'px';\n          } // Handle cursor\n\n\n          if (isRight && isBottom || isLeft && isTop) {\n            styles.cursor = 'nwse-resize';\n          } else if (isRight && isTop || isBottom && isLeft) {\n            styles.cursor = 'nesw-resize';\n          } else if (isRight || isLeft) {\n            styles.cursor = 'ew-resize';\n          } else if (isBottom || isTop) {\n            styles.cursor = 'ns-resize';\n          } else {\n            styles.cursor = 'default';\n          }\n\n          var interactionProps = store.getReadOnly() ? {} : {\n            onMouseDown: this.mouseDown,\n            onMouseMove: this.mouseMove,\n            onMouseLeave: this.mouseLeave\n          };\n          return _react2.default.createElement(WrappedComponent, _extends({}, elementProps, interactionProps, {\n            blockProps: blockProps,\n            ref: function ref(element) {\n              _this2.wrapper = element;\n            },\n            style: styles\n          }));\n        }\n      }]);\n\n      return BlockResizeableDecorator;\n    }(_react.Component), _class.displayName = 'BlockDraggable(' + getDisplayName(WrappedComponent) + ')', _class.WrappedComponent = WrappedComponent.WrappedComponent || WrappedComponent, _class.defaultProps = _extends({\n      horizontal: 'relative',\n      vertical: false,\n      resizeSteps: 1\n    }, config), _temp2;\n  };\n};","map":null,"metadata":{},"sourceType":"script"}