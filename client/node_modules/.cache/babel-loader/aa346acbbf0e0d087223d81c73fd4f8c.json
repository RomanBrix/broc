{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _draftJs = require('draft-js');\n\nvar _DraftOffsetKey = require('draft-js/lib/DraftOffsetKey');\n\nvar _DraftOffsetKey2 = _interopRequireDefault(_DraftOffsetKey);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // Set selection of editor to next/previous block\n\n\nexports.default = function (getEditorState, setEditorState, mode, event) {\n  var editorState = getEditorState();\n  var selectionKey = editorState.getSelection().getAnchorKey();\n  var newActiveBlock = mode === 'up' ? editorState.getCurrentContent().getBlockBefore(selectionKey) : editorState.getCurrentContent().getBlockAfter(selectionKey);\n\n  if (newActiveBlock && newActiveBlock.get('key') === selectionKey) {\n    return;\n  }\n\n  if (newActiveBlock) {\n    // TODO verify that always a key-0-0 exists\n    var offsetKey = _DraftOffsetKey2.default.encode(newActiveBlock.getKey(), 0, 0);\n\n    var node = document.querySelectorAll('[data-offset-key=\"' + offsetKey + '\"]')[0]; // set the native selection to the node so the caret is not in the text and\n    // the selectionState matches the native selection\n\n    var selection = window.getSelection();\n    var range = document.createRange();\n    range.setStart(node, 0);\n    range.setEnd(node, 0);\n    selection.removeAllRanges();\n    selection.addRange(range);\n    var offset = mode === 'up' ? newActiveBlock.getLength() : 0;\n    event.preventDefault();\n    setEditorState(_draftJs.EditorState.forceSelection(editorState, new _draftJs.SelectionState({\n      anchorKey: newActiveBlock.getKey(),\n      anchorOffset: offset,\n      focusKey: newActiveBlock.getKey(),\n      focusOffset: offset,\n      isBackward: false\n    })));\n  }\n};","map":null,"metadata":{},"sourceType":"script"}